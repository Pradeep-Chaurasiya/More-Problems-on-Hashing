public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int longestConsecutive(final int[] A) {
        
        // Arrays.sort(A);
        
        // int n =  A.length;
        // if(n==1) return 1;
        
        // int max = Integer.MIN_VALUE;
        // int count = 1;
        
        
        // for(int i=0; i<n-1; i++){
        //     if(A[i+1]-A[i] == 1) count++;
        //     else if(A[i+1]-A[i] != 0)count = 1;
        //     max = Math.max(max, count);
            
        // }
        // return max;


        HashSet<Integer> set = new HashSet<>();
        int n = A.length;

        for(int i : A) set.add(i);
        int ans = Integer.MIN_VALUE;

        for(int i=0; i<n; i++){
            int temp = A[i];
            int count = 0;
            if(set.contains(temp-1)) continue;
            else{
                while(set.contains(temp)){
                    count++;
                    temp = temp+1;
                }
            }
            ans = Math.max(ans, count);
        }

        return ans;
        
    }
}
