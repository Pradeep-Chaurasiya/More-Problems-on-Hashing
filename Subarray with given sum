public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A, int B) {
        
        // ArrayList<Integer> list  = new ArrayList<>();  //BF
        // int n = A.size();
        
        // for(int i=0; i<n; i++){
        //     long sum = 0;
        //     for(int j=i; j<n; j++){
        //         sum += A.get(j);
        //         if(sum == B){
        //             for(int k=i; k<=j; k++){ // this loop will just run one time --> O(1)
        //                 list.add(A.get(k));
        //             }
        //             return list;
        //         }
        //     }
        // }
        // list.add(-1);
        // return list;
        
        
        

        int n = A.size();
        HashMap<Long, Integer> map = new HashMap<>();
        map.put(0L, -1);
        long presum = 0;
        int idx1 = 0;
        int idx2 = -1;
        boolean flag = false;

        for(int i=0; i<n; i++){
            presum += A.get(i);
            if(map.containsKey(presum-B)) {
                idx2 = i;
                idx1 = map.get(presum-B);
                flag = true;
                break;
            }
            else map.put(presum, i);
        }
        ArrayList<Integer> list = new ArrayList<>();
       if(flag) for(int i=idx1+1; i<=idx2; i++) list.add(A.get(i));
       else list.add(-1);
        return list;
    }
}
